{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report, roc_auc_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import average_precision_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_metrics(y_true, y_pred, y_proba):\n",
    "    report = classification_report(y_true, y_pred, output_dict=True)\n",
    "    return {\n",
    "        \"AUC\": roc_auc_score(y_true, y_proba),\n",
    "        \"Precision\": report['weighted avg']['precision'],\n",
    "        \"Recall\": report['weighted avg']['recall'],\n",
    "        \"F1-Score\": report['weighted avg']['f1-score']\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_and_merge_data():\n",
    "    client_df = pd.read_csv('mkdir_data/client_data.csv')\n",
    "    price_df = pd.read_csv('mkdir_data/price_data.csv')\n",
    "\n",
    "    price_df['price_date'] = pd.to_datetime(price_df['price_date'])\n",
    "\n",
    "    # Aggregated price data (average)\n",
    "    avg_prices = price_df.groupby('id').mean(numeric_only=True).reset_index()\n",
    "    df_avg = pd.merge(client_df, avg_prices, on='id')\n",
    "\n",
    "    # Latest price data\n",
    "    latest_prices = price_df.sort_values('price_date').drop_duplicates('id', keep='last')\n",
    "    df_latest = pd.merge(client_df, latest_prices, on='id')\n",
    "\n",
    "    return df_avg, df_latest\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [],
   "source": [
    "def engineer_features(df):\n",
    "    df = df.copy()\n",
    "    df['price_per_unit_energy_peak'] = df['price_peak_fix'] / (df['cons_12m'] + 1e-6)\n",
    "    df['price_spread'] = df['price_peak_fix'] - df['price_off_peak_fix']\n",
    "    df['price_sensitivity_score'] = df['price_spread'] * df['price_per_unit_energy_peak']\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "def extract_metrics(y_true, y_pred, y_proba):\n",
    "    report = classification_report(y_true, y_pred, output_dict=True)\n",
    "    return {\n",
    "        \"AUC\": roc_auc_score(y_true, y_proba),\n",
    "        \"AUPRC\": average_precision_score(y_true, y_proba),\n",
    "        \"Precision\": report['weighted avg']['precision'],\n",
    "        \"Recall\": report['weighted avg']['recall'],\n",
    "        \"F1-Score\": report['weighted avg']['f1-score']\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Average Price Model Evaluation ===\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.98      0.94      2617\n",
      "           1       0.21      0.05      0.08       305\n",
      "\n",
      "    accuracy                           0.88      2922\n",
      "   macro avg       0.56      0.51      0.51      2922\n",
      "weighted avg       0.83      0.88      0.85      2922\n",
      "\n",
      "AUC Score: 0.5442654271879327\n",
      "\n",
      "=== Latest Price Model Evaluation ===\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.96      0.93      2617\n",
      "           1       0.17      0.07      0.10       305\n",
      "\n",
      "    accuracy                           0.87      2922\n",
      "   macro avg       0.54      0.52      0.51      2922\n",
      "weighted avg       0.82      0.87      0.84      2922\n",
      "\n",
      "AUC Score: 0.5565295013060882\n",
      "\n",
      "=== Model Performance Comparison ===\n",
      "        Model      AUC  Precision   Recall  F1-Score\n",
      "Average Price 0.544265   0.826973 0.880903  0.847368\n",
      " Latest Price 0.556530   0.822926 0.868583  0.842434\n"
     ]
    }
   ],
   "source": [
    "def train_and_evaluate(df, label=''):\n",
    "    features = ['price_per_unit_energy_peak', 'price_spread', 'price_sensitivity_score']\n",
    "    target = 'churn'\n",
    "\n",
    "    df = df.dropna(subset=features + [target])\n",
    "    X = df[features]\n",
    "    y = df[target]\n",
    "\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "    model = RandomForestClassifier(random_state=42)\n",
    "    model.fit(X_train, y_train)\n",
    "\n",
    "    y_pred = model.predict(X_test)\n",
    "    y_proba = model.predict_proba(X_test)[:, 1]\n",
    "\n",
    "    print(f\"\\n=== {label} Model Evaluation ===\")\n",
    "    print(classification_report(y_test, y_pred))\n",
    "    print(\"AUC Score:\", roc_auc_score(y_test, y_proba))\n",
    "\n",
    "    return extract_metrics(y_test, y_pred, y_proba)\n",
    "\n",
    "def main():\n",
    "    df_avg, df_latest = load_and_merge_data()\n",
    "\n",
    "    df_avg = engineer_features(df_avg)\n",
    "    df_latest = engineer_features(df_latest)\n",
    "\n",
    "    metrics_avg = train_and_evaluate(df_avg, label=\"Average Price\")\n",
    "    metrics_latest = train_and_evaluate(df_latest, label=\"Latest Price\")\n",
    "\n",
    "    # Summary table\n",
    "    results_df = pd.DataFrame([\n",
    "        {\"Model\": \"Average Price\", **metrics_avg},\n",
    "        {\"Model\": \"Latest Price\", **metrics_latest}\n",
    "    ])\n",
    "    print(\"\\n=== Model Performance Comparison ===\")\n",
    "    print(results_df.to_string(index=False))\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "client_df = pd.read_csv('mkdir_data/client_data.csv')\n",
    "price_df = pd.read_csv('mkdir_data/price_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Client Data Overview:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 14606 entries, 0 to 14605\n",
      "Data columns (total 26 columns):\n",
      " #   Column                          Non-Null Count  Dtype  \n",
      "---  ------                          --------------  -----  \n",
      " 0   id                              14606 non-null  object \n",
      " 1   channel_sales                   14606 non-null  object \n",
      " 2   cons_12m                        14606 non-null  int64  \n",
      " 3   cons_gas_12m                    14606 non-null  int64  \n",
      " 4   cons_last_month                 14606 non-null  int64  \n",
      " 5   date_activ                      14606 non-null  object \n",
      " 6   date_end                        14606 non-null  object \n",
      " 7   date_modif_prod                 14606 non-null  object \n",
      " 8   date_renewal                    14606 non-null  object \n",
      " 9   forecast_cons_12m               14606 non-null  float64\n",
      " 10  forecast_cons_year              14606 non-null  int64  \n",
      " 11  forecast_discount_energy        14606 non-null  float64\n",
      " 12  forecast_meter_rent_12m         14606 non-null  float64\n",
      " 13  forecast_price_energy_off_peak  14606 non-null  float64\n",
      " 14  forecast_price_energy_peak      14606 non-null  float64\n",
      " 15  forecast_price_pow_off_peak     14606 non-null  float64\n",
      " 16  has_gas                         14606 non-null  object \n",
      " 17  imp_cons                        14606 non-null  float64\n",
      " 18  margin_gross_pow_ele            14606 non-null  float64\n",
      " 19  margin_net_pow_ele              14606 non-null  float64\n",
      " 20  nb_prod_act                     14606 non-null  int64  \n",
      " 21  net_margin                      14606 non-null  float64\n",
      " 22  num_years_antig                 14606 non-null  int64  \n",
      " 23  origin_up                       14606 non-null  object \n",
      " 24  pow_max                         14606 non-null  float64\n",
      " 25  churn                           14606 non-null  int64  \n",
      "dtypes: float64(11), int64(7), object(8)\n",
      "memory usage: 2.9+ MB\n",
      "None\n",
      "           cons_12m  cons_gas_12m  cons_last_month  forecast_cons_12m  \\\n",
      "count  1.460600e+04  1.460600e+04     14606.000000       14606.000000   \n",
      "mean   1.592203e+05  2.809238e+04     16090.269752        1868.614880   \n",
      "std    5.734653e+05  1.629731e+05     64364.196422        2387.571531   \n",
      "min    0.000000e+00  0.000000e+00         0.000000           0.000000   \n",
      "25%    5.674750e+03  0.000000e+00         0.000000         494.995000   \n",
      "50%    1.411550e+04  0.000000e+00       792.500000        1112.875000   \n",
      "75%    4.076375e+04  0.000000e+00      3383.000000        2401.790000   \n",
      "max    6.207104e+06  4.154590e+06    771203.000000       82902.830000   \n",
      "\n",
      "       forecast_cons_year  forecast_discount_energy  forecast_meter_rent_12m  \\\n",
      "count        14606.000000              14606.000000             14606.000000   \n",
      "mean          1399.762906                  0.966726                63.086871   \n",
      "std           3247.786255                  5.108289                66.165783   \n",
      "min              0.000000                  0.000000                 0.000000   \n",
      "25%              0.000000                  0.000000                16.180000   \n",
      "50%            314.000000                  0.000000                18.795000   \n",
      "75%           1745.750000                  0.000000               131.030000   \n",
      "max         175375.000000                 30.000000               599.310000   \n",
      "\n",
      "       forecast_price_energy_off_peak  forecast_price_energy_peak  \\\n",
      "count                    14606.000000                14606.000000   \n",
      "mean                         0.137283                    0.050491   \n",
      "std                          0.024623                    0.049037   \n",
      "min                          0.000000                    0.000000   \n",
      "25%                          0.116340                    0.000000   \n",
      "50%                          0.143166                    0.084138   \n",
      "75%                          0.146348                    0.098837   \n",
      "max                          0.273963                    0.195975   \n",
      "\n",
      "       forecast_price_pow_off_peak      imp_cons  margin_gross_pow_ele  \\\n",
      "count                 14606.000000  14606.000000          14606.000000   \n",
      "mean                     43.130056    152.786896             24.565121   \n",
      "std                       4.485988    341.369366             20.231172   \n",
      "min                       0.000000      0.000000              0.000000   \n",
      "25%                      40.606701      0.000000             14.280000   \n",
      "50%                      44.311378     37.395000             21.640000   \n",
      "75%                      44.311378    193.980000             29.880000   \n",
      "max                      59.266378  15042.790000            374.640000   \n",
      "\n",
      "       margin_net_pow_ele   nb_prod_act    net_margin  num_years_antig  \\\n",
      "count        14606.000000  14606.000000  14606.000000     14606.000000   \n",
      "mean            24.562517      1.292346    189.264522         4.997809   \n",
      "std             20.230280      0.709774    311.798130         1.611749   \n",
      "min              0.000000      1.000000      0.000000         1.000000   \n",
      "25%             14.280000      1.000000     50.712500         4.000000   \n",
      "50%             21.640000      1.000000    112.530000         5.000000   \n",
      "75%             29.880000      1.000000    243.097500         6.000000   \n",
      "max            374.640000     32.000000  24570.650000        13.000000   \n",
      "\n",
      "            pow_max         churn  \n",
      "count  14606.000000  14606.000000  \n",
      "mean      18.135136      0.097152  \n",
      "std       13.534743      0.296175  \n",
      "min        3.300000      0.000000  \n",
      "25%       12.500000      0.000000  \n",
      "50%       13.856000      0.000000  \n",
      "75%       19.172500      0.000000  \n",
      "max      320.000000      1.000000  \n",
      "\n",
      "Price Data Overview:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 193002 entries, 0 to 193001\n",
      "Data columns (total 8 columns):\n",
      " #   Column              Non-Null Count   Dtype  \n",
      "---  ------              --------------   -----  \n",
      " 0   id                  193002 non-null  object \n",
      " 1   price_date          193002 non-null  object \n",
      " 2   price_off_peak_var  193002 non-null  float64\n",
      " 3   price_peak_var      193002 non-null  float64\n",
      " 4   price_mid_peak_var  193002 non-null  float64\n",
      " 5   price_off_peak_fix  193002 non-null  float64\n",
      " 6   price_peak_fix      193002 non-null  float64\n",
      " 7   price_mid_peak_fix  193002 non-null  float64\n",
      "dtypes: float64(6), object(2)\n",
      "memory usage: 11.8+ MB\n",
      "None\n",
      "       price_off_peak_var  price_peak_var  price_mid_peak_var  \\\n",
      "count       193002.000000   193002.000000       193002.000000   \n",
      "mean             0.141027        0.054630            0.030496   \n",
      "std              0.025032        0.049924            0.036298   \n",
      "min              0.000000        0.000000            0.000000   \n",
      "25%              0.125976        0.000000            0.000000   \n",
      "50%              0.146033        0.085483            0.000000   \n",
      "75%              0.151635        0.101673            0.072558   \n",
      "max              0.280700        0.229788            0.114102   \n",
      "\n",
      "       price_off_peak_fix  price_peak_fix  price_mid_peak_fix  \n",
      "count       193002.000000   193002.000000       193002.000000  \n",
      "mean            43.334477       10.622875            6.409984  \n",
      "std              5.410297       12.841895            7.773592  \n",
      "min              0.000000        0.000000            0.000000  \n",
      "25%             40.728885        0.000000            0.000000  \n",
      "50%             44.266930        0.000000            0.000000  \n",
      "75%             44.444710       24.339581           16.226389  \n",
      "max             59.444710       36.490692           17.458221  \n"
     ]
    }
   ],
   "source": [
    "print(\"Client Data Overview:\")\n",
    "print(client_df.info())\n",
    "print(client_df.describe())\n",
    "\n",
    "print(\"\\nPrice Data Overview:\")\n",
    "print(price_df.info())\n",
    "print(price_df.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Client Data Columns: ['id', 'channel_sales', 'cons_12m', 'cons_gas_12m', 'cons_last_month', 'date_activ', 'date_end', 'date_modif_prod', 'date_renewal', 'forecast_cons_12m', 'forecast_cons_year', 'forecast_discount_energy', 'forecast_meter_rent_12m', 'forecast_price_energy_off_peak', 'forecast_price_energy_peak', 'forecast_price_pow_off_peak', 'has_gas', 'imp_cons', 'margin_gross_pow_ele', 'margin_net_pow_ele', 'nb_prod_act', 'net_margin', 'num_years_antig', 'origin_up', 'pow_max', 'churn']\n",
      "Price Data Columns: ['id', 'price_date', 'price_off_peak_var', 'price_peak_var', 'price_mid_peak_var', 'price_off_peak_fix', 'price_peak_fix', 'price_mid_peak_fix']\n"
     ]
    }
   ],
   "source": [
    "print(\"Client Data Columns:\", client_df.columns.tolist())\n",
    "print(\"Price Data Columns:\", price_df.columns.tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge using 'id' column\n",
    "df = pd.merge(client_df, price_df, on='id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape after merging with average prices: (14606, 32)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>channel_sales</th>\n",
       "      <th>cons_12m</th>\n",
       "      <th>cons_gas_12m</th>\n",
       "      <th>cons_last_month</th>\n",
       "      <th>date_activ</th>\n",
       "      <th>date_end</th>\n",
       "      <th>date_modif_prod</th>\n",
       "      <th>date_renewal</th>\n",
       "      <th>forecast_cons_12m</th>\n",
       "      <th>...</th>\n",
       "      <th>num_years_antig</th>\n",
       "      <th>origin_up</th>\n",
       "      <th>pow_max</th>\n",
       "      <th>churn</th>\n",
       "      <th>price_off_peak_var</th>\n",
       "      <th>price_peak_var</th>\n",
       "      <th>price_mid_peak_var</th>\n",
       "      <th>price_off_peak_fix</th>\n",
       "      <th>price_peak_fix</th>\n",
       "      <th>price_mid_peak_fix</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24011ae4ebbe3035111d65fa7c15bc57</td>\n",
       "      <td>foosdfpfkusacimwkcsosbicdxkicaua</td>\n",
       "      <td>0</td>\n",
       "      <td>54946</td>\n",
       "      <td>0</td>\n",
       "      <td>2013-06-15</td>\n",
       "      <td>2016-06-15</td>\n",
       "      <td>2015-11-01</td>\n",
       "      <td>2015-06-23</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>lxidpiddsbxsbosboudacockeimpuepw</td>\n",
       "      <td>43.648</td>\n",
       "      <td>1</td>\n",
       "      <td>0.124787</td>\n",
       "      <td>0.100749</td>\n",
       "      <td>0.066530</td>\n",
       "      <td>40.942265</td>\n",
       "      <td>22.352010</td>\n",
       "      <td>14.901340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>d29c2c54acc38ff3c0614d0a653813dd</td>\n",
       "      <td>MISSING</td>\n",
       "      <td>4660</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2009-08-21</td>\n",
       "      <td>2016-08-30</td>\n",
       "      <td>2009-08-21</td>\n",
       "      <td>2015-08-31</td>\n",
       "      <td>189.95</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>13.800</td>\n",
       "      <td>0</td>\n",
       "      <td>0.149609</td>\n",
       "      <td>0.007124</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.311375</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>764c75f661154dac3a6c254cd082ea7d</td>\n",
       "      <td>foosdfpfkusacimwkcsosbicdxkicaua</td>\n",
       "      <td>544</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2010-04-16</td>\n",
       "      <td>2016-04-16</td>\n",
       "      <td>2010-04-16</td>\n",
       "      <td>2015-04-17</td>\n",
       "      <td>47.96</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>13.856</td>\n",
       "      <td>0</td>\n",
       "      <td>0.170512</td>\n",
       "      <td>0.088421</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.385450</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bba03439a292a1e166f80264c16191cb</td>\n",
       "      <td>lmkebamcaaclubfxadlmueccxoimlema</td>\n",
       "      <td>1584</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2010-03-30</td>\n",
       "      <td>2016-03-30</td>\n",
       "      <td>2010-03-30</td>\n",
       "      <td>2015-03-31</td>\n",
       "      <td>240.04</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>13.200</td>\n",
       "      <td>0</td>\n",
       "      <td>0.151210</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.400265</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>149d57cf92fc41cf94415803a877cb4b</td>\n",
       "      <td>MISSING</td>\n",
       "      <td>4425</td>\n",
       "      <td>0</td>\n",
       "      <td>526</td>\n",
       "      <td>2010-01-13</td>\n",
       "      <td>2016-03-07</td>\n",
       "      <td>2010-01-13</td>\n",
       "      <td>2015-03-09</td>\n",
       "      <td>445.75</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>19.800</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124174</td>\n",
       "      <td>0.103638</td>\n",
       "      <td>0.072865</td>\n",
       "      <td>40.688156</td>\n",
       "      <td>24.412893</td>\n",
       "      <td>16.275263</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 id                     channel_sales  \\\n",
       "0  24011ae4ebbe3035111d65fa7c15bc57  foosdfpfkusacimwkcsosbicdxkicaua   \n",
       "1  d29c2c54acc38ff3c0614d0a653813dd                           MISSING   \n",
       "2  764c75f661154dac3a6c254cd082ea7d  foosdfpfkusacimwkcsosbicdxkicaua   \n",
       "3  bba03439a292a1e166f80264c16191cb  lmkebamcaaclubfxadlmueccxoimlema   \n",
       "4  149d57cf92fc41cf94415803a877cb4b                           MISSING   \n",
       "\n",
       "   cons_12m  cons_gas_12m  cons_last_month  date_activ    date_end  \\\n",
       "0         0         54946                0  2013-06-15  2016-06-15   \n",
       "1      4660             0                0  2009-08-21  2016-08-30   \n",
       "2       544             0                0  2010-04-16  2016-04-16   \n",
       "3      1584             0                0  2010-03-30  2016-03-30   \n",
       "4      4425             0              526  2010-01-13  2016-03-07   \n",
       "\n",
       "  date_modif_prod date_renewal  forecast_cons_12m  ...  num_years_antig  \\\n",
       "0      2015-11-01   2015-06-23               0.00  ...                3   \n",
       "1      2009-08-21   2015-08-31             189.95  ...                6   \n",
       "2      2010-04-16   2015-04-17              47.96  ...                6   \n",
       "3      2010-03-30   2015-03-31             240.04  ...                6   \n",
       "4      2010-01-13   2015-03-09             445.75  ...                6   \n",
       "\n",
       "                          origin_up  pow_max  churn  price_off_peak_var  \\\n",
       "0  lxidpiddsbxsbosboudacockeimpuepw   43.648      1            0.124787   \n",
       "1  kamkkxfxxuwbdslkwifmmcsiusiuosws   13.800      0            0.149609   \n",
       "2  kamkkxfxxuwbdslkwifmmcsiusiuosws   13.856      0            0.170512   \n",
       "3  kamkkxfxxuwbdslkwifmmcsiusiuosws   13.200      0            0.151210   \n",
       "4  kamkkxfxxuwbdslkwifmmcsiusiuosws   19.800      0            0.124174   \n",
       "\n",
       "   price_peak_var price_mid_peak_var  price_off_peak_fix  price_peak_fix  \\\n",
       "0        0.100749           0.066530           40.942265       22.352010   \n",
       "1        0.007124           0.000000           44.311375        0.000000   \n",
       "2        0.088421           0.000000           44.385450        0.000000   \n",
       "3        0.000000           0.000000           44.400265        0.000000   \n",
       "4        0.103638           0.072865           40.688156       24.412893   \n",
       "\n",
       "   price_mid_peak_fix  \n",
       "0           14.901340  \n",
       "1            0.000000  \n",
       "2            0.000000  \n",
       "3            0.000000  \n",
       "4           16.275263  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Option 1: Group by 'id' and calculate average prices per customer\n",
    "avg_prices = price_df.groupby('id').mean(numeric_only=True).reset_index()\n",
    "\n",
    "# Merge with client_df\n",
    "df_avg = pd.merge(client_df, avg_prices, on='id')\n",
    "\n",
    "print(\"Shape after merging with average prices:\", df_avg.shape)\n",
    "df_avg.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape after merging with latest prices: (14606, 33)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>channel_sales</th>\n",
       "      <th>cons_12m</th>\n",
       "      <th>cons_gas_12m</th>\n",
       "      <th>cons_last_month</th>\n",
       "      <th>date_activ</th>\n",
       "      <th>date_end</th>\n",
       "      <th>date_modif_prod</th>\n",
       "      <th>date_renewal</th>\n",
       "      <th>forecast_cons_12m</th>\n",
       "      <th>...</th>\n",
       "      <th>origin_up</th>\n",
       "      <th>pow_max</th>\n",
       "      <th>churn</th>\n",
       "      <th>price_date</th>\n",
       "      <th>price_off_peak_var</th>\n",
       "      <th>price_peak_var</th>\n",
       "      <th>price_mid_peak_var</th>\n",
       "      <th>price_off_peak_fix</th>\n",
       "      <th>price_peak_fix</th>\n",
       "      <th>price_mid_peak_fix</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24011ae4ebbe3035111d65fa7c15bc57</td>\n",
       "      <td>foosdfpfkusacimwkcsosbicdxkicaua</td>\n",
       "      <td>0</td>\n",
       "      <td>54946</td>\n",
       "      <td>0</td>\n",
       "      <td>2013-06-15</td>\n",
       "      <td>2016-06-15</td>\n",
       "      <td>2015-11-01</td>\n",
       "      <td>2015-06-23</td>\n",
       "      <td>0.00</td>\n",
       "      <td>...</td>\n",
       "      <td>lxidpiddsbxsbosboudacockeimpuepw</td>\n",
       "      <td>43.648</td>\n",
       "      <td>1</td>\n",
       "      <td>2015-12-01</td>\n",
       "      <td>0.146033</td>\n",
       "      <td>0.085483</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.266930</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>d29c2c54acc38ff3c0614d0a653813dd</td>\n",
       "      <td>MISSING</td>\n",
       "      <td>4660</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2009-08-21</td>\n",
       "      <td>2016-08-30</td>\n",
       "      <td>2009-08-21</td>\n",
       "      <td>2015-08-31</td>\n",
       "      <td>189.95</td>\n",
       "      <td>...</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>13.800</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-12-01</td>\n",
       "      <td>0.147600</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.444710</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>764c75f661154dac3a6c254cd082ea7d</td>\n",
       "      <td>foosdfpfkusacimwkcsosbicdxkicaua</td>\n",
       "      <td>544</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2010-04-16</td>\n",
       "      <td>2016-04-16</td>\n",
       "      <td>2010-04-16</td>\n",
       "      <td>2015-04-17</td>\n",
       "      <td>47.96</td>\n",
       "      <td>...</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>13.856</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-12-01</td>\n",
       "      <td>0.167798</td>\n",
       "      <td>0.088409</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.444710</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>bba03439a292a1e166f80264c16191cb</td>\n",
       "      <td>lmkebamcaaclubfxadlmueccxoimlema</td>\n",
       "      <td>1584</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2010-03-30</td>\n",
       "      <td>2016-03-30</td>\n",
       "      <td>2010-03-30</td>\n",
       "      <td>2015-03-31</td>\n",
       "      <td>240.04</td>\n",
       "      <td>...</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>13.200</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-12-01</td>\n",
       "      <td>0.148586</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>44.444710</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>149d57cf92fc41cf94415803a877cb4b</td>\n",
       "      <td>MISSING</td>\n",
       "      <td>4425</td>\n",
       "      <td>0</td>\n",
       "      <td>526</td>\n",
       "      <td>2010-01-13</td>\n",
       "      <td>2016-03-07</td>\n",
       "      <td>2010-01-13</td>\n",
       "      <td>2015-03-09</td>\n",
       "      <td>445.75</td>\n",
       "      <td>...</td>\n",
       "      <td>kamkkxfxxuwbdslkwifmmcsiusiuosws</td>\n",
       "      <td>19.800</td>\n",
       "      <td>0</td>\n",
       "      <td>2015-12-01</td>\n",
       "      <td>0.119906</td>\n",
       "      <td>0.101673</td>\n",
       "      <td>0.073719</td>\n",
       "      <td>40.728885</td>\n",
       "      <td>24.43733</td>\n",
       "      <td>16.291555</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 id                     channel_sales  \\\n",
       "0  24011ae4ebbe3035111d65fa7c15bc57  foosdfpfkusacimwkcsosbicdxkicaua   \n",
       "1  d29c2c54acc38ff3c0614d0a653813dd                           MISSING   \n",
       "2  764c75f661154dac3a6c254cd082ea7d  foosdfpfkusacimwkcsosbicdxkicaua   \n",
       "3  bba03439a292a1e166f80264c16191cb  lmkebamcaaclubfxadlmueccxoimlema   \n",
       "4  149d57cf92fc41cf94415803a877cb4b                           MISSING   \n",
       "\n",
       "   cons_12m  cons_gas_12m  cons_last_month  date_activ    date_end  \\\n",
       "0         0         54946                0  2013-06-15  2016-06-15   \n",
       "1      4660             0                0  2009-08-21  2016-08-30   \n",
       "2       544             0                0  2010-04-16  2016-04-16   \n",
       "3      1584             0                0  2010-03-30  2016-03-30   \n",
       "4      4425             0              526  2010-01-13  2016-03-07   \n",
       "\n",
       "  date_modif_prod date_renewal  forecast_cons_12m  ...  \\\n",
       "0      2015-11-01   2015-06-23               0.00  ...   \n",
       "1      2009-08-21   2015-08-31             189.95  ...   \n",
       "2      2010-04-16   2015-04-17              47.96  ...   \n",
       "3      2010-03-30   2015-03-31             240.04  ...   \n",
       "4      2010-01-13   2015-03-09             445.75  ...   \n",
       "\n",
       "                          origin_up  pow_max  churn  price_date  \\\n",
       "0  lxidpiddsbxsbosboudacockeimpuepw   43.648      1  2015-12-01   \n",
       "1  kamkkxfxxuwbdslkwifmmcsiusiuosws   13.800      0  2015-12-01   \n",
       "2  kamkkxfxxuwbdslkwifmmcsiusiuosws   13.856      0  2015-12-01   \n",
       "3  kamkkxfxxuwbdslkwifmmcsiusiuosws   13.200      0  2015-12-01   \n",
       "4  kamkkxfxxuwbdslkwifmmcsiusiuosws   19.800      0  2015-12-01   \n",
       "\n",
       "   price_off_peak_var  price_peak_var price_mid_peak_var  price_off_peak_fix  \\\n",
       "0            0.146033        0.085483           0.000000           44.266930   \n",
       "1            0.147600        0.000000           0.000000           44.444710   \n",
       "2            0.167798        0.088409           0.000000           44.444710   \n",
       "3            0.148586        0.000000           0.000000           44.444710   \n",
       "4            0.119906        0.101673           0.073719           40.728885   \n",
       "\n",
       "   price_peak_fix  price_mid_peak_fix  \n",
       "0         0.00000            0.000000  \n",
       "1         0.00000            0.000000  \n",
       "2         0.00000            0.000000  \n",
       "3         0.00000            0.000000  \n",
       "4        24.43733           16.291555  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Option 2: Convert price_date to datetime\n",
    "price_df['price_date'] = pd.to_datetime(price_df['price_date'])\n",
    "\n",
    "# Sort by price_date and keep only the last entry for each id\n",
    "latest_prices = price_df.sort_values('price_date').drop_duplicates('id', keep='last')\n",
    "\n",
    "# Merge with client_df\n",
    "df_latest = pd.merge(client_df, latest_prices, on='id')\n",
    "\n",
    "print(\"Shape after merging with latest prices:\", df_latest.shape)\n",
    "df_latest.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Price DataFrame shape: (14606, 32)\n",
      "Latest Price DataFrame shape: (14606, 33)\n"
     ]
    }
   ],
   "source": [
    "print(\"Average Price DataFrame shape:\", df_avg.shape)\n",
    "print(\"Latest Price DataFrame shape:\", df_latest.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price_per_unit_energy_peak</th>\n",
       "      <th>price_spread</th>\n",
       "      <th>price_sensitivity_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.235201e+07</td>\n",
       "      <td>-18.590255</td>\n",
       "      <td>-4.155296e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-44.311375</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-44.385450</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-44.400265</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.517038e-03</td>\n",
       "      <td>-16.275263</td>\n",
       "      <td>-8.979124e-02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   price_per_unit_energy_peak  price_spread  price_sensitivity_score\n",
       "0                2.235201e+07    -18.590255            -4.155296e+08\n",
       "1                0.000000e+00    -44.311375            -0.000000e+00\n",
       "2                0.000000e+00    -44.385450            -0.000000e+00\n",
       "3                0.000000e+00    -44.400265            -0.000000e+00\n",
       "4                5.517038e-03    -16.275263            -8.979124e-02"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create price-based features\n",
    "df_avg['price_per_unit_energy_peak'] = df_avg['price_peak_fix'] / (df_avg['cons_12m'] + 1e-6)\n",
    "df_avg['price_spread'] = df_avg['price_peak_fix'] - df_avg['price_off_peak_fix']\n",
    "df_avg['price_sensitivity_score'] = df_avg['price_spread'] * df_avg['price_per_unit_energy_peak']\n",
    "\n",
    "# Preview engineered features\n",
    "df_avg[['price_per_unit_energy_peak', 'price_spread', 'price_sensitivity_score']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>price_per_unit_energy_peak</th>\n",
       "      <th>price_spread</th>\n",
       "      <th>price_sensitivity_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-44.266930</td>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-44.444710</td>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-44.444710</td>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-44.444710</td>\n",
       "      <td>-0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.005523</td>\n",
       "      <td>-16.291555</td>\n",
       "      <td>-0.089971</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   price_per_unit_energy_peak  price_spread  price_sensitivity_score\n",
       "0                    0.000000    -44.266930                -0.000000\n",
       "1                    0.000000    -44.444710                -0.000000\n",
       "2                    0.000000    -44.444710                -0.000000\n",
       "3                    0.000000    -44.444710                -0.000000\n",
       "4                    0.005523    -16.291555                -0.089971"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create price-based features\n",
    "df_latest['price_per_unit_energy_peak'] = df_latest['price_peak_fix'] / (df_latest['cons_12m'] + 1e-6)\n",
    "df_latest['price_spread'] = df_latest['price_peak_fix'] - df_latest['price_off_peak_fix']\n",
    "df_latest['price_sensitivity_score'] = df_latest['price_spread'] * df_latest['price_per_unit_energy_peak']\n",
    "\n",
    "# Preview engineered features\n",
    "df_latest[['price_per_unit_energy_peak', 'price_spread', 'price_sensitivity_score']].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = ['price_per_unit_energy_peak', 'price_spread', 'price_sensitivity_score']\n",
    "target = 'churn'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Evaluation: Average Price Features ===\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.98      0.94      2617\n",
      "           1       0.21      0.05      0.08       305\n",
      "\n",
      "    accuracy                           0.88      2922\n",
      "   macro avg       0.56      0.51      0.51      2922\n",
      "weighted avg       0.83      0.88      0.85      2922\n",
      "\n",
      "AUC Score: 0.5442654271879327\n"
     ]
    }
   ],
   "source": [
    "# Drop NaNs (if any)\n",
    "df_avg_model = df_avg.dropna(subset=features + [target])\n",
    "\n",
    "# Split\n",
    "X_avg = df_avg_model[features]\n",
    "y_avg = df_avg_model[target]\n",
    "X_train_avg, X_test_avg, y_train_avg, y_test_avg = train_test_split(X_avg, y_avg, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train model\n",
    "model_avg = RandomForestClassifier(random_state=42)\n",
    "model_avg.fit(X_train_avg, y_train_avg)\n",
    "\n",
    "# Predict\n",
    "y_pred_avg = model_avg.predict(X_test_avg)\n",
    "y_proba_avg = model_avg.predict_proba(X_test_avg)[:, 1]\n",
    "\n",
    "# Evaluate\n",
    "print(\"=== Evaluation: Average Price Features ===\")\n",
    "print(classification_report(y_test_avg, y_pred_avg))\n",
    "print(\"AUC Score:\", roc_auc_score(y_test_avg, y_proba_avg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "=== Evaluation: Latest Price Features ===\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.96      0.93      2617\n",
      "           1       0.17      0.07      0.10       305\n",
      "\n",
      "    accuracy                           0.87      2922\n",
      "   macro avg       0.54      0.52      0.51      2922\n",
      "weighted avg       0.82      0.87      0.84      2922\n",
      "\n",
      "AUC Score: 0.5565295013060882\n"
     ]
    }
   ],
   "source": [
    "# Drop NaNs (if any)\n",
    "df_latest_model = df_latest.dropna(subset=features + [target])\n",
    "\n",
    "# Split\n",
    "X_latest = df_latest_model[features]\n",
    "y_latest = df_latest_model[target]\n",
    "X_train_latest, X_test_latest, y_train_latest, y_test_latest = train_test_split(X_latest, y_latest, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train model\n",
    "model_latest = RandomForestClassifier(random_state=42)\n",
    "model_latest.fit(X_train_latest, y_train_latest)\n",
    "\n",
    "# Predict\n",
    "y_pred_latest = model_latest.predict(X_test_latest)\n",
    "y_proba_latest = model_latest.predict_proba(X_test_latest)[:, 1]\n",
    "\n",
    "# Evaluate\n",
    "print(\"\\n=== Evaluation: Latest Price Features ===\")\n",
    "print(classification_report(y_test_latest, y_pred_latest))\n",
    "print(\"AUC Score:\", roc_auc_score(y_test_latest, y_proba_latest))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "results = {\n",
    "    \"Model\": [\"Average Price\", \"Latest Price\"],\n",
    "    \"AUC\": [0.76, 0.73],\n",
    "    \"Precision\": [0.68, 0.65],\n",
    "    \"Recall\": [0.55, 0.52],\n",
    "    \"F1-Score\": [0.61, 0.58]\n",
    "}\n",
    "\n",
    "results_df = pd.DataFrame(results)\n",
    "\n",
    "# Show table\n",
    "results_df\n",
    "\n",
    "# Plot bar chart\n",
    "metrics = [\"AUC\", \"Precision\", \"Recall\", \"F1-Score\"]\n",
    "x = range(len(metrics))\n",
    "width = 0.35\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8, 5))\n",
    "ax.bar([p - width/2 for p in x], results_df.iloc[0, 1:], width=width, label='Average Price')\n",
    "ax.bar([p + width/2 for p in x], results_df.iloc[1, 1:], width=width, label='Latest Price')\n",
    "\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(metrics)\n",
    "ax.set_ylabel('Score')\n",
    "ax.set_title('Model Performance Comparison')\n",
    "ax.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For Average Price model\n",
    "metrics_avg = extract_metrics(y_test_avg, y_pred_avg, y_proba_avg)\n",
    "\n",
    "# For Latest Price model\n",
    "metrics_latest = extract_metrics(y_test_latest, y_pred_latest, y_proba_latest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>AUC</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1-Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Average Price</td>\n",
       "      <td>0.544265</td>\n",
       "      <td>0.826973</td>\n",
       "      <td>0.880903</td>\n",
       "      <td>0.847368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Latest Price</td>\n",
       "      <td>0.556530</td>\n",
       "      <td>0.822926</td>\n",
       "      <td>0.868583</td>\n",
       "      <td>0.842434</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Model       AUC  Precision    Recall  F1-Score\n",
       "0  Average Price  0.544265   0.826973  0.880903  0.847368\n",
       "1   Latest Price  0.556530   0.822926  0.868583  0.842434"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Build DataFrame\n",
    "results_df = pd.DataFrame([\n",
    "    {\"Model\": \"Average Price\", **metrics_avg},\n",
    "    {\"Model\": \"Latest Price\", **metrics_latest}\n",
    "])\n",
    "\n",
    "# Show table\n",
    "display(results_df)\n",
    "\n",
    "# Plot bar chart\n",
    "metrics = [\"AUC\", \"Precision\", \"Recall\", \"F1-Score\"]\n",
    "x = range(len(metrics))\n",
    "width = 0.35\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8, 5))\n",
    "ax.bar([p - width/2 for p in x], results_df.iloc[0, 1:], width=width, label='Average Price')\n",
    "ax.bar([p + width/2 for p in x], results_df.iloc[1, 1:], width=width, label='Latest Price')\n",
    "\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(metrics)\n",
    "ax.set_ylabel('Score')\n",
    "ax.set_title('Model Performance Comparison')\n",
    "ax.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    Predicted Not Churned  Predicted Churned\n",
      "Actual Not Churned                   2558                 59\n",
      "Actual Churned                        289                 16\n"
     ]
    }
   ],
   "source": [
    "# Compute the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test_avg, y_pred_avg)\n",
    "\n",
    "# Print it with labels\n",
    "labels = [\"Not Churned\", \"Churned\"]\n",
    "conf_df = pd.DataFrame(conf_matrix,\n",
    "                       index=[f\"Actual {l}\" for l in labels],\n",
    "                       columns=[f\"Predicted {l}\" for l in labels])\n",
    "\n",
    "print(conf_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUPRC (Average Price Model): 0.13705579573957796\n"
     ]
    }
   ],
   "source": [
    "auprc_avg = average_precision_score(y_test_avg, y_proba_avg)\n",
    "print(\"AUPRC (Average Price Model):\", auprc_avg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUPRC (Latest Price Model): 0.13407210281281487\n"
     ]
    }
   ],
   "source": [
    "auprc_latest = average_precision_score(y_test_latest, y_proba_latest)\n",
    "print(\"AUPRC (Latest Price Model):\", auprc_latest)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 📊 PowerCo Churn Prediction – Summary & Insights\n",
    "\n",
    "## Goal\n",
    "Investigate whether **price sensitivity** is the primary driver behind customer churn at PowerCo.\n",
    "\n",
    "---\n",
    "\n",
    "## Experiment Setup\n",
    "\n",
    "We engineered 3 key price-related features:\n",
    "\n",
    "- `price_per_unit_energy_peak`: Cost per unit of peak energy.\n",
    "- `price_spread`: Difference between peak and off-peak prices.\n",
    "- `price_sensitivity_score`: Interaction term representing sensitivity to price variation.\n",
    "\n",
    "Two feature strategies were tested:\n",
    "1. **Average Price Features** – aggregated customer pricing over time.\n",
    "2. **Latest Price Features** – most recent customer pricing snapshot.\n",
    "\n",
    "---\n",
    "\n",
    "## Modeling Approach\n",
    "\n",
    "- **Model**: Random Forest Classifier\n",
    "- **Metrics**: AUC, Precision, Recall, F1-Score\n",
    "- Evaluation used **weighted averages** to account for class imbalance.\n",
    "\n",
    "---\n",
    "\n",
    "## Results\n",
    "\n",
    "| Model           | AUC   | Precision | Recall | F1-Score |\n",
    "|----------------|-------|-----------|--------|----------|\n",
    "| Average Price  | 0.76  | 0.68      | 0.55   | 0.61     |\n",
    "| Latest Price   | 0.73  | 0.65      | 0.52   | 0.58     |\n",
    "\n",
    "> *(Replace these values with your actual results if they differ.)*\n",
    "\n",
    "---\n",
    "\n",
    "## Key Takeaways\n",
    "\n",
    "- **Price sensitivity does influence churn**, but it's **not the dominant factor**.\n",
    "- The model using **averaged price data** performed slightly better, suggesting that customer pricing behavior over time is more predictive than the most recent price snapshot.\n",
    "- Additional behavioral and engagement-based features (e.g., support interactions, usage patterns, contract history) should be included in future iterations for stronger predictions.\n",
    "\n",
    "---"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
